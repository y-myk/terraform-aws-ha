(python37-venv) ymyk@k8s-thw:~/terraform/C3333227/halab$ terraform apply
data.template_file.cloud-init[0]: Refreshing state...
data.template_file.cloud-init[1]: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.app1-vip will be created
  + resource "aws_eip" "app1-vip" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.10.5"
      + association_id            = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags                      = (known after apply)
      + vpc                       = true
    }

  # aws_eip.ext-eip[0] will be created
  + resource "aws_eip" "ext-eip" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.10.4"
      + association_id            = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags                      = (known after apply)
      + vpc                       = true
    }

  # aws_eip.ext-eip[1] will be created
  + resource "aws_eip" "ext-eip" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.11.4"
      + association_id            = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags                      = (known after apply)
      + vpc                       = true
    }

  # aws_eip.mgmt-eip[0] will be created
  + resource "aws_eip" "mgmt-eip" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.0.4"
      + association_id            = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags                      = (known after apply)
      + vpc                       = true
    }

  # aws_eip.mgmt-eip[1] will be created
  + resource "aws_eip" "mgmt-eip" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.1.4"
      + association_id            = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags                      = (known after apply)
      + vpc                       = true
    }

  # aws_iam_instance_profile.CFE_profile will be created
  + resource "aws_iam_instance_profile" "CFE_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "CFE_profile"
      + path        = "/"
      + role        = "CFE_role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_role.CFE_role will be created
  + resource "aws_iam_role" "CFE_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "sts:AssumeRole",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = [
                              + "ec2.amazonaws.com",
                            ]
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "CFE_role"
      + path                  = "/"
      + tags                  = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.CFE_policy will be created
  + resource "aws_iam_role_policy" "CFE_policy" {
      + id     = (known after apply)
      + name   = "CFE_policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeInstanceStatus",
                          + "ec2:DescribeAddresses",
                          + "ec2:DescribeNetworkInterfaces",
                          + "ec2:DescribeNetworkInterfaceAttribute",
                          + "ec2:DescribeRouteTables",
                          + "s3:ListAllMyBuckets",
                          + "ec2:AssociateAddress",
                          + "ec2:DisassociateAddress",
                          + "ec2:AssignPrivateIpAddresses",
                          + "ec2:UnassignPrivateIpAddresses",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:CreateRoute",
                          + "ec2:ReplaceRoute",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ec2:us-east-1:284202514452:route-table/*"
                    },
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                          + "s3:GetBucketTagging",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::abgmbh"
                    },
                  + {
                      + Action   = [
                          + "s3:PutObject",
                          + "s3:GetObject",
                          + "s3:DeleteObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::abgmbh/*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # aws_instance.bigip-vm[0] will be created
  + resource "aws_instance" "bigip-vm" {
      + ami                          = "ami-0a6b4a1889304929a"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "CFE_profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "m4.xlarge"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "ymyk"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + subnet_id                    = (known after apply)
      + tags                         = (known after apply)
      + tenancy                      = (known after apply)
      + user_data                    = "ab124bd09d420ffced95284c4d50c823f27616c4"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = false
          + device_index          = 0
          + network_interface_id  = (known after apply)
        }
      + network_interface {
          + delete_on_termination = false
          + device_index          = 1
          + network_interface_id  = (known after apply)
        }
      + network_interface {
          + delete_on_termination = false
          + device_index          = 2
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.bigip-vm[1] will be created
  + resource "aws_instance" "bigip-vm" {
      + ami                          = "ami-0a6b4a1889304929a"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "CFE_profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "m4.xlarge"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "ymyk"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + subnet_id                    = (known after apply)
      + tags                         = (known after apply)
      + tenancy                      = (known after apply)
      + user_data                    = "d9881982932ca05d06a0e5f3cbc9569e660a1f67"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = false
          + device_index          = 0
          + network_interface_id  = (known after apply)
        }
      + network_interface {
          + delete_on_termination = false
          + device_index          = 1
          + network_interface_id  = (known after apply)
        }
      + network_interface {
          + delete_on_termination = false
          + device_index          = 2
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_network_interface.bigip-ext[0] will be created
  + resource "aws_network_interface" "bigip-ext" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.10.4",
          + "10.0.10.5",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_network_interface.bigip-ext[1] will be created
  + resource "aws_network_interface" "bigip-ext" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.11.4",
          + "10.0.11.5",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_network_interface.bigip-int[0] will be created
  + resource "aws_network_interface" "bigip-int" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.20.4",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_network_interface.bigip-int[1] will be created
  + resource "aws_network_interface" "bigip-int" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.21.4",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_network_interface.bigip-mgmt[0] will be created
  + resource "aws_network_interface" "bigip-mgmt" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.0.4",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_network_interface.bigip-mgmt[1] will be created
  + resource "aws_network_interface" "bigip-mgmt" {
      + id                = (known after apply)
      + mac_address       = (known after apply)
      + outpost_arn       = (known after apply)
      + private_dns_name  = (known after apply)
      + private_ip        = (known after apply)
      + private_ips       = [
          + "10.0.1.4",
        ]
      + private_ips_count = (known after apply)
      + security_groups   = (known after apply)
      + source_dest_check = false
      + subnet_id         = (known after apply)
      + tags              = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_route_table.alienIP-rt will be created
  + resource "aws_route_table" "alienIP-rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "192.168.0.0/24"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = (known after apply)
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = (known after apply)
      + vpc_id           = (known after apply)
    }

  # aws_security_group.sg-Internet will be created
  + resource "aws_security_group" "sg-Internet" {
      + arn                    = (known after apply)
      + description            = "Internet facing rules"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                  + "10.0.0.0/16",
                ]
              + description      = "Home"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "DNS"
              + from_port        = 53
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "udp"
              + security_groups  = []
              + self             = false
              + to_port          = 53
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "TCP 443"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "UDP 443"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "udp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.sg-main will be created
  + resource "aws_security_group" "sg-main" {
      + arn                    = (known after apply)
      + description            = "main rules"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.0.0/8",
                ]
              + description      = "VPC"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
          + {
              + cidr_blocks      = [
                  + "69.251.248.77/32",
                ]
              + description      = "Home"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # local_file.cloud-init_file[0] will be created
  + resource "local_file" "cloud-init_file" {
      + content              = <<~EOT
            #cloud-config

            write_files:
              - path: /config/custom-config.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  echo "Hello World" >> /var/tmp/cloud-init-output

                  # Wait for MCPD to be up before running tmsh commands
                  source /usr/lib/bigstart/bigip-ready-functions
                  wait_bigip_ready

                  # Begin BIG-IP configuration
                  tmsh modify sys global-settings gui-setup disabled
                  tmsh modify sys global-settings gui-security-banner-text "Configured via Cloud-Init!"
                  tmsh modify sys db config.allow.rfc3927 value enable
                  tmsh create /sys folder /LOCAL_ONLY  traffic-group traffic-group-local-only device-group none
                  tmsh create net route /LOCAL_ONLY/default gw 10.0.10.1 network 0.0.0.0/0
                  tmsh modify sys dns name-servers add { 169.254.169.253 }
                  tmsh modify /auth password-policy policy-enforcement disabled
                  tmsh modify sys db provision.extramb value 1000
                  tmsh modify sys db restjavad.useextramb value true
                  tmsh restart sys service restjavad
                  tmsh save /sys config

            runcmd:
              # NOTE: Commands must be non-blocking so send long running commands (polling/waiting for mcpd) to the background
              - /config/custom-config.sh &

            chpasswd:
              list: |
                admin:Ics0admin
              expire: False

            #       myLicense:
            #        class: License
            #        licenseType: regKey
            #        regKey: DVZIN-KYDWZ-OIKHH-JFQHQ-QILXQIO

            tmos_declared:
              enabled: true
              icontrollx_trusted_sources: false
              icontrollx_package_urls:
                - "https://github.com/F5Networks/f5-declarative-onboarding/releases/download/v1.13.0/f5-declarative-onboarding-1.13.0-5.noarch.rpm"
                - "https://github.com/F5Networks/f5-appsvcs-extension/releases/download/v3.19.1/f5-appsvcs-3.19.1-1.noarch.rpm"
                - "https://github.com/F5Networks/f5-telemetry-streaming/releases/download/v1.11.0/f5-telemetry-1.11.0-1.noarch.rpm"
                - "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.2.0/f5-cloud-failover-1.2.0-0.noarch.rpm"
              do_declaration:
                schemaVersion: 1.13.0
                class: Device
                async: true
                label: Cloudinit Onboarding
                Common:
                  class: Tenant
                  hostname: 1.ab.gmbh
                  dbvars:
                    class: DbVariables
                    ui.advisory.enabled: true
                    ui.advisory.color: orange
                  provisioningLevels:
                    class: Provision
                    ltm: nominal
                  dnsServers:
                    class: DNS
                    nameServers:
                      - 8.8.8.8
                    search:
                      - ab.gmbh
                  ntpServers:
                    class: NTP
                    servers:
                      - 0.pool.ntp.org
                      - 1.pool.ntp.org
                      - 2.pool.ntp.org
                  internal:
                    class: VLAN
                    mtu: 1450
                    interfaces:
                      - name: 1.2
                        tagged: false
                  internal-self:
                    class: SelfIp
                    address: 10.0.20.4/24
                    vlan: internal
                    allowService: default
                    trafficGroup: traffic-group-local-only
                  external:
                    class: VLAN
                    mtu: 1450
                    interfaces:
                      - name: 1.1
                        tagged: false
                  external-self:
                    class: SelfIp
                    address: 10.0.10.4/24
                    vlan: external
                    allowService: default
                    trafficGroup: traffic-group-local-only
                  configsync:
                    class: ConfigSync
                    configsyncIp: /Common/external-self/address
                  failoverAddress:
                    class: FailoverUnicast
                    address: /Common/external-self/address
                  failoverGroup:
                    class: DeviceGroup
                    type: sync-failover
                    members: ["1.ab.gmbh", "2.ab.gmbh"]
                    owner: /Common/failoverGroup/members/0
                    autoSync: true
                    saveOnAutoSync: false
                    networkFailover: true
                    fullLoadOnSync: false
                    asmSync: false
                  trust:
                    class: DeviceTrust
                    localUsername: admin
                    localPassword: Ics0admin
                    remoteHost: 10.0.0.4
                    remoteUsername: admin
                    remotePassword: Ics0admin
              post_onboard_enabled: true
              post_onboard_commands:
                - "echo 'curl -s http://monitors.internal.local/rebooted' >> /config/startup"
              phone_home_url: "https://webhook.site/088d9c20-12f8-49ee-9f3e-1ac632ad58d2"
        EOT
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "./cloud-init0.render"
      + id                   = (known after apply)
    }

  # local_file.cloud-init_file[1] will be created
  + resource "local_file" "cloud-init_file" {
      + content              = <<~EOT
            #cloud-config

            write_files:
              - path: /config/custom-config.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  echo "Hello World" >> /var/tmp/cloud-init-output

                  # Wait for MCPD to be up before running tmsh commands
                  source /usr/lib/bigstart/bigip-ready-functions
                  wait_bigip_ready

                  # Begin BIG-IP configuration
                  tmsh modify sys global-settings gui-setup disabled
                  tmsh modify sys global-settings gui-security-banner-text "Configured via Cloud-Init!"
                  tmsh modify sys db config.allow.rfc3927 value enable
                  tmsh create /sys folder /LOCAL_ONLY  traffic-group traffic-group-local-only device-group none
                  tmsh create net route /LOCAL_ONLY/default gw 10.0.11.1 network 0.0.0.0/0
                  tmsh modify sys dns name-servers add { 169.254.169.253 }
                  tmsh modify /auth password-policy policy-enforcement disabled
                  tmsh modify sys db provision.extramb value 1000
                  tmsh modify sys db restjavad.useextramb value true
                  tmsh restart sys service restjavad
                  tmsh save /sys config

            runcmd:
              # NOTE: Commands must be non-blocking so send long running commands (polling/waiting for mcpd) to the background
              - /config/custom-config.sh &

            chpasswd:
              list: |
                admin:Ics0admin
              expire: False

            #       myLicense:
            #        class: License
            #        licenseType: regKey
            #        regKey: DVZIN-KYDWZ-OIKHH-JFQHQ-QILXQIH

            tmos_declared:
              enabled: true
              icontrollx_trusted_sources: false
              icontrollx_package_urls:
                - "https://github.com/F5Networks/f5-declarative-onboarding/releases/download/v1.13.0/f5-declarative-onboarding-1.13.0-5.noarch.rpm"
                - "https://github.com/F5Networks/f5-appsvcs-extension/releases/download/v3.19.1/f5-appsvcs-3.19.1-1.noarch.rpm"
                - "https://github.com/F5Networks/f5-telemetry-streaming/releases/download/v1.11.0/f5-telemetry-1.11.0-1.noarch.rpm"
                - "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.2.0/f5-cloud-failover-1.2.0-0.noarch.rpm"
              do_declaration:
                schemaVersion: 1.13.0
                class: Device
                async: true
                label: Cloudinit Onboarding
                Common:
                  class: Tenant
                  hostname: 2.ab.gmbh
                  dbvars:
                    class: DbVariables
                    ui.advisory.enabled: true
                    ui.advisory.color: orange
                  provisioningLevels:
                    class: Provision
                    ltm: nominal
                  dnsServers:
                    class: DNS
                    nameServers:
                      - 8.8.8.8
                    search:
                      - ab.gmbh
                  ntpServers:
                    class: NTP
                    servers:
                      - 0.pool.ntp.org
                      - 1.pool.ntp.org
                      - 2.pool.ntp.org
                  internal:
                    class: VLAN
                    mtu: 1450
                    interfaces:
                      - name: 1.2
                        tagged: false
                  internal-self:
                    class: SelfIp
                    address: 10.0.21.4/24
                    vlan: internal
                    allowService: default
                    trafficGroup: traffic-group-local-only
                  external:
                    class: VLAN
                    mtu: 1450
                    interfaces:
                      - name: 1.1
                        tagged: false
                  external-self:
                    class: SelfIp
                    address: 10.0.11.4/24
                    vlan: external
                    allowService: default
                    trafficGroup: traffic-group-local-only
                  configsync:
                    class: ConfigSync
                    configsyncIp: /Common/external-self/address
                  failoverAddress:
                    class: FailoverUnicast
                    address: /Common/external-self/address
                  failoverGroup:
                    class: DeviceGroup
                    type: sync-failover
                    members: ["1.ab.gmbh", "2.ab.gmbh"]
                    owner: /Common/failoverGroup/members/0
                    autoSync: true
                    saveOnAutoSync: false
                    networkFailover: true
                    fullLoadOnSync: false
                    asmSync: false
                  trust:
                    class: DeviceTrust
                    localUsername: admin
                    localPassword: Ics0admin
                    remoteHost: 10.0.0.4
                    remoteUsername: admin
                    remotePassword: Ics0admin
              post_onboard_enabled: true
              post_onboard_commands:
                - "echo 'curl -s http://monitors.internal.local/rebooted' >> /config/startup"
              phone_home_url: "https://webhook.site/088d9c20-12f8-49ee-9f3e-1ac632ad58d2"
        EOT
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "./cloud-init1.render"
      + id                   = (known after apply)
    }

  # random_id.id will be created
  + resource "random_id" "id" {
      + b64         = (known after apply)
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = (known after apply)
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block     = "0.0.0.0/0"
      + destination_prefix_list_id = (known after apply)
      + egress_only_gateway_id     = (known after apply)
      + gateway_id                 = (known after apply)
      + id                         = (known after apply)
      + instance_id                = (known after apply)
      + instance_owner_id          = (known after apply)
      + nat_gateway_id             = (known after apply)
      + network_interface_id       = (known after apply)
      + origin                     = (known after apply)
      + route_table_id             = (known after apply)
      + state                      = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[2] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[3] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.21.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public[2] will be created
  + resource "aws_subnet" "public" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public[3] will be created
  + resource "aws_subnet" "public" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.11.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_vpc.this[0] will be created
  + resource "aws_vpc" "this" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = (known after apply)
    }

Plan: 40 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value:
